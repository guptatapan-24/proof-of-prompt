import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { toast } from "sonner";
import { Loader2, Sparkles, Hash, CheckCircle2 } from "lucide-react";

const Generate = () => {
  const [prompt, setPrompt] = useState("");
  const [generatedContent, setGeneratedContent] = useState("");
  const [contentHash, setContentHash] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isHashing, setIsHashing] = useState(false);

  const validatePrompt = (text: string): boolean => {
    if (text.length < 10) {
      toast.error("Prompt must be at least 10 characters");
      return false;
    }
    if (text.length > 2000) {
      toast.error("Prompt must be less than 2000 characters");
      return false;
    }
    // Basic sanitization check
    const dangerousPatterns = /<script|javascript:|onerror=/i;
    if (dangerousPatterns.test(text)) {
      toast.error("Invalid prompt content detected");
      return false;
    }
    return true;
  };

  const handleGenerate = async () => {
    if (!validatePrompt(prompt)) return;

    setIsGenerating(true);
    try {
      // TODO: Call Edge Function to generate content via OpenAI
      // Placeholder for now
      await new Promise(resolve => setTimeout(resolve, 2000));
      const mockContent = `Generated content based on: "${prompt.slice(0, 50)}..."\n\nThis is AI-generated content that demonstrates the proof-of-prompt concept. In production, this would be generated by OpenAI GPT-4o.`;
      setGeneratedContent(mockContent);
      toast.success("Content generated successfully!");
    } catch (error: any) {
      toast.error(error.message || "Failed to generate content");
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCreateProof = async () => {
    if (!generatedContent) {
      toast.error("Generate content first");
      return;
    }

    setIsHashing(true);
    try {
      // TODO: Call Edge Function to create hash and store metadata
      // Placeholder for now
      await new Promise(resolve => setTimeout(resolve, 1500));
      const mockHash = "0x" + Array.from({ length: 64 }, () => 
        Math.floor(Math.random() * 16).toString(16)
      ).join('');
      setContentHash(mockHash);
      toast.success("Proof created and stored!");
    } catch (error: any) {
      toast.error(error.message || "Failed to create proof");
    } finally {
      setIsHashing(false);
    }
  };

  const handleRegisterOnChain = async () => {
    if (!contentHash) {
      toast.error("Create proof first");
      return;
    }

    try {
      // TODO: Implement blockchain registration via Ethers.js
      toast.info("Blockchain registration coming soon!");
    } catch (error: any) {
      toast.error(error.message || "Registration failed");
    }
  };

  return (
    <div className="min-h-screen p-4">
      <div className="container mx-auto max-w-5xl py-8">
        <div className="mb-8">
          <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
            Generate & Prove
          </h1>
          <p className="text-muted-foreground">
            Create AI content and register immutable proof on the blockchain
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          {/* Input Section */}
          <Card className="gradient-card shadow-card border-0">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-primary" />
                Your Prompt
              </CardTitle>
              <CardDescription>
                Describe what you want AI to generate
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="prompt">Prompt</Label>
                <Textarea
                  id="prompt"
                  placeholder="Write a creative essay about the future of AI..."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  className="min-h-[200px] resize-none"
                  maxLength={2000}
                />
                <p className="text-xs text-muted-foreground">
                  {prompt.length} / 2000 characters
                </p>
              </div>
              <Button 
                onClick={handleGenerate} 
                className="w-full" 
                variant="hero"
                disabled={isGenerating || !prompt}
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    Generate Content
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {/* Output Section */}
          <Card className="gradient-card shadow-card border-0">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CheckCircle2 className="w-5 h-5 text-success" />
                Generated Content
              </CardTitle>
              <CardDescription>
                AI-generated output and proof hash
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="content">Content</Label>
                <Textarea
                  id="content"
                  value={generatedContent}
                  readOnly
                  className="min-h-[150px] resize-none bg-muted/50"
                  placeholder="Generated content will appear here..."
                />
              </div>
              
              {contentHash && (
                <div className="space-y-2">
                  <Label htmlFor="hash">Proof Hash</Label>
                  <div className="flex gap-2">
                    <Input
                      id="hash"
                      value={contentHash}
                      readOnly
                      className="font-mono text-xs bg-muted/50"
                    />
                    <Button
                      variant="glass"
                      size="icon"
                      onClick={() => {
                        navigator.clipboard.writeText(contentHash);
                        toast.success("Hash copied!");
                      }}
                    >
                      <Hash className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              )}

              <div className="flex gap-2">
                <Button 
                  onClick={handleCreateProof} 
                  className="flex-1" 
                  disabled={isHashing || !generatedContent}
                >
                  {isHashing ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Creating...
                    </>
                  ) : (
                    <>
                      <Hash className="mr-2 h-4 w-4" />
                      Create Proof
                    </>
                  )}
                </Button>
                
                <Button 
                  onClick={handleRegisterOnChain} 
                  variant="hero"
                  className="flex-1"
                  disabled={!contentHash}
                >
                  Register On-Chain
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Generate;
